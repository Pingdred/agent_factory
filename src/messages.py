"""
Agent Factory - Message Classes

This module provide the data structures for communication between agents,
tools, and the chat system within the Agent Factory plugin. They handle
the conversion between different message formats and maintain compatibility
with both Cheshire Cat and LangChain frameworks.

Classes
-------
LLMAction
    Represents an action (tool call) requested by the LLM.
AgentOutput
    Represents the output from an agent execution including text and actions.
CatToolMessage
    Message representing a tool call and its result in the chat history.
"""

from typing import Dict, List, Tuple

from pydantic import BaseModel
from langchain_core.messages import AIMessage, ToolMessage, ToolCall

from cat.convo.messages import CatMessage
from cat.utils import BaseModelDict


class LLMAction(BaseModel):
    """
    Represents an action (tool call) requested by the LLM.

    This class encapsulates the details of a tool or function call that
    an LLM wants to execute, including input parameters, output results,
    and execution metadata.

    Attributes
    ----------
    id : str | None, optional
        Unique identifier for the action call, used to match requests
        with responses in LLM API interactions, by default None.
    name : str
        The name of the tool or function to call.
    input : Dict
        Dictionary containing the input parameters for the tool call.
    output : str | None, optional
        The result of executing the tool call, by default None.
    return_direct : bool, optional
        Whether the tool output should be returned directly to the user
        without further LLM processing, by default False.

    Notes
    -----
    The id field is crucial for matching tool call requests with responses.
    This is a strict requirement for LLM APIs that support tool calling,
    """
    id: str | None = None
    name: str
    input: Dict
    output: str | None = None
    return_direct: bool = False


class AgentOutput(BaseModelDict):
    """
    Represents the output from an agent execution including text and actions.

    Attributes
    ----------
    output : str | None, optional
        The textual output generated by the agent, by default None.
    actions : List[LLMAction], optional
        List of actions (tool calls) executed by the agent, by default [].
    """
    output: str | None = None
    actions: List[LLMAction] = []

    @property
    def intermediate_steps(self) -> List[Tuple[Tuple[str, Dict], str]]:
        """Return the list of actions as intermediate steps for compatibility."""
        return [((action.name, action.input), action.output) for action in self.actions]


class CatToolMessage(CatMessage):
    """
    Message representing a tool call and its result in the chat history.

    Attributes
    ----------
    action : LLMAction
        The action (tool call) that this message represents.

    Examples
    --------
    >>> action = LLMAction(name="calculator", input={"expr": "2+2"}, output="4")
    >>> message = CatToolMessage(user_id="user123", action=action)
    """
    action: LLMAction

    def langchainfy(self) -> List[ToolMessage]:
        """
        Convert to LangChain format for chat history.
        
        Returns two messages: AIMessage with tool call and ToolMessage with result.
        """
        # Message to represent the tool called
        tool_call = AIMessage(
            content=[], # No content in AIMessage, as it represents a tool call
            tool_calls=[
                ToolCall(
                    name=self.action.name,
                    args=self.action.input,
                    id=self.action.id,
                )
            ],
        )

        # Message to represent the result of the tool called
        tool_result = ToolMessage(
            content=self.action.output,
            tool_call_id=self.action.id,
        )

        return [tool_call, tool_result]
